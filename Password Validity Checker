RESEARCH:
As per the team’s research - 
To ensure the safety of confidential, as well as personal documents there is a need for strong and secure passwords. The code is designed in such a way that it enables the user to create a password that meets a certain set of criteria that were configured in the password validation process. These rules ensure that a strong and secure password is generated which would keep one’s documents and files safe. Further research into password validation revealed these as the basic standards used in many systems to enforce secure password creation.
Definition: Password Validators are responsible for determining whether a proposed password is acceptable for use and could include checks like ensuring it meets minimum length requirements, and that it has an appropriate range and type of characters.

ANALYSIS:
Our team has acknowledged and interpreted the problem well. We listed a set of rules we believed would be essential to generate a strong and secure password on a small scale. They include:
i) The length of the password should be at least 8 characters
ii) The password should contain at least one small letter (a to z)
iii) The password should contain at least one capital letter (A to Z)
iv) The password should contain at least one special character (limited to !, @, #, and $)

IDEATE:
As per the research and analysis, our team developed a code for generating a strong passcode which would help the user to maintain security of the desired documents/files. At first, we designed the program code with the help of an algorithm to ensure we took all the factors into consideration. The code component serves to improve security by acquiring account passwords and enabling its strength. This component exposes system variables that enable you to configure password policy, and status variables for component monitoring.
We also made sure the program would be able to address and handle edge cases as well as provide specific feedback. Such cases included:
i) Passwords shorter than 8 characters.
ii) Passwords missing one or more of the required character types.
Algorithm:
Step 1. Start
Step 2.Declare Variables i,s,c,n,sp==0
Step 3. Create string (pwd)
Step 4. Accept value for first string
Step 5. If string length>=8 ,go to step 6.
Else display “Error: Password must have minimum 8 characters”
Step 6. Repeat step 7 to step 10  till i<length
Step 7. If pwd[i] has small char then s++
Step 8. If pwd[i] has capital char then c++
Step 9. If pwd[i] has numeric value then n++
Step 10. If pwd[i] has special char (!,@,#,$) then sp++
Step 11. If s,c,n,sp all are greater than 0 Display “VALID PASSWORD”and go to step 16.
 Else go to step 12
Step 12. If s==0 Display “password doesn’t contain small char” 
Step 13. If c==0 Display “password doesn’t contain capital char”
Step 14. If n==0 Display “password doesn’t contain numeric value”
Step 15. If sp==0 Display “password doesn’t contain given special char”
Step 16.Display “Exiting password validity checker”.

BUILD:
The program is built in such a way that it checks the following given conditions:
i) The length of the password should be at least 8 characters.
ii) The password should contain at least one small letter (a to z)
iii) The password should contain at least one capital letter (A to Z)
iv) The password should contain at least one special character (limited to !, @, #, and $)
We included the <string.h> library in our program code, as we wanted to use the strlen() function present in this header file. We researched and found out that our length calculation step could be done by using the strlen() function efficiently. strlen() calculates the length of the input password string, i.e., how many characters it contains, excluding the null terminator, i.e empty spaces, which is crucial to verify whether the password falls within the allowed range of minimum 8 characters.
The program iterates through the input password to check for the presence of lowercase letters, uppercase letters, numeric values, and special characters (limited to !, @, #, and $).  Depending on the outcome, the program provides feedback on which criteria (if any) the password fails.

TESTING:
Our team built and tested this validator in C language on Visual Studio Code. which is a highly efficient and easily workable platform for all programmers. Testing was carried out to ensure that the program correctly identifies all valid and invalid passwords. The following scenarios were each tested multiple times:
i) Passwords shorter than 8 characters  successfully triggered the warning message: “Error: Password must have minimum 8 characters.”
ii) Passwords missing small letters successfully triggered the warning message: “Password doesn't contain small letters (a to z).”
iii) Passwords missing capital letters successfully triggered the warning message: “Password doesn't contain capital letters (A to Z).”
iv) Passwords missing numeric values successfully triggered the warning message: “Password doesn't contain numeric values (0 to 9).”
v) Passwords missing the given special characters successfully triggered the warning message: “Password doesn't contain any of the given special characters (!, @, #, $).\n”
Testing showed that the program correctly identified passwords with missing character types, correctly handled input that failed the minimum length constraint and also provided clear feedback, allowing users to know exactly which criteria their password did not meet.

CODE:
#include <stdio.h>#include <string.h>
#define N 16
int main() 
{
    printf("Welcome to Password Validity Checker!\n");
    printf("Create a password having minimum 8 characters . Password should have at least one of: \n1. Small letter (a to z) \n2. Capital Letter (A to Z) \n3. Numeric Value (0 to 9) \n4. Given Special Characters (!, @, #, $)\n");
    int i, s = 0, c = 0, n = 0, sp = 0;
    char pwd[N];
    printf("Enter a password: ");
    scanf("%15s", pwd);
    int length = strlen(pwd);
    if (length >= 8)
    { // Check minimum length
        for (i = 0; i < length; i++) 
        {
            if (pwd[i] >= 'a' && pwd[i] <= 'z') 
            {
                s++;
            } else if (pwd[i] >= 'A' && pwd[i] <= 'Z') 
            {
                c++;
            } else if (pwd[i] >= '0' && pwd[i] <= '9') 
            {
                n++;
            } else if (pwd[i] == '!' || pwd[i] == '@' || pwd[i] == '#' || pwd[i] == '$') 
            {
                sp++;
            }
        }
        if (s > 0 && c > 0 && n > 0 && sp > 0)
        {
            printf("Valid Password!\n");
        } 
        else 
        {
            if (s == 0) 
            {
                printf("Password doesn't contain small letters (a to z).\n");
            }
            if (c == 0) 
            {
                printf("Password doesn't contain capital letters (A to Z).\n");
            }
            if (n == 0) 
            {
                printf("Password doesn't contain numeric values (0 to 9).\n");
            }
            if (sp == 0) 
            {
                printf("Password doesn't contain any of the given special characters (!, @, #, $).\n");
            }
        }
    } 
    else 
    {
        printf("Error: Password must have minimum 8 characters.\n");
    }
    printf("Exiting Password Validity Checker.\n");
    return 0;
}
